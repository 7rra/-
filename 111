// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TurtleCoin is ERC20, Ownable {
    uint256 private _taxRate;

    constructor() ERC20("Turtle Coin", "TT") {
        uint256 initialSupply = 800000000 * 10 ** 18; // 800,000,000 with 18 decimals
        _mint(msg.sender, initialSupply);
        _taxRate = 0;
    }

    function setTaxRate(uint256 newTaxRate) public onlyOwner {
        require(newTaxRate <= 100, "Tax rate can't exceed 100%");
        _taxRate = newTaxRate;
    }

    function getTaxRate() public view returns (uint256) {
        return _taxRate;
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        uint256 taxAmount = (amount * _taxRate) / 100;
        uint256 transferAmount = amount - taxAmount;

        _transfer(_msgSender(), recipient, transferAmount);
        if (taxAmount > 0) {
            _burn(_msgSender(), taxAmount);
        }

        return true;
    }
}
